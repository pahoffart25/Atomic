{"ast":null,"code":"var _jsxFileName = \"/Users/paulhoffart/Desktop/Atomic-Job/atomic-job-front-end/src/components/JobShow.js\";\nimport React from 'react';\nimport NotesBox from './NotesBox';\nimport TasksBox from './TasksBox';\nexport default class JobShow extends React.Component {\n  constructor() {\n    super();\n\n    this.handleTaskChange = (event, taskEditing) => {\n      let taskList = this.state.tasks;\n      taskEditing.item = event.target.value;\n      taskList.map(task => {\n        if (task === taskEditing) {\n          task.item = taskEditing.item;\n        }\n      });\n      this.setState({\n        tasks: taskList\n      });\n    };\n\n    this.addTask = (event, task) => {\n      event.preventDefault();\n      let postObj = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          item: event.target[0].value,\n          closed: false,\n          job_id: this.props.job.id\n        })\n      };\n      event.target.reset();\n      fetch(`http://localhost:3000/job_tasks`, postObj).then(resp => resp.json()).then(newTask => {\n        this.state.tasks.push(newTask);\n        this.setState({\n          tasks: this.state.tasks\n        });\n      });\n    };\n\n    this.editTask = (event, task) => {\n      // task here will already have updated value bc of onChange updating it\n      // or closed being toggle within the Task component \n      fetch(`http://localhost:3000/job_tasks/${task.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(task)\n      }).then(resp => resp.json()).then(updatedTask => {\n        let taskList = this.state.tasks;\n        taskList.map(task => {\n          if (task.id === updatedTask.id) {\n            task = updatedTask;\n          }\n        });\n        this.setState({\n          tasks: taskList\n        });\n      });\n    };\n\n    this.deleteTask = task => {\n      fetch(`http://localhost:3000/job_tasks/${task.id}`, {\n        method: \"DELETE\"\n      }).then(resp => resp.json()).then(reminaingTaskList => {\n        this.setState({\n          tasks: reminaingTaskList\n        });\n      });\n    };\n\n    this.handleNoteChange = (event, noteEditing) => {\n      let noteList = this.state.notes;\n      noteEditing.content = event.target.value;\n      noteList.map(note => {\n        if (note === noteEditing) {\n          note.item = noteEditing.content;\n        }\n      });\n      this.setState({\n        notes: noteList\n      });\n    };\n\n    this.editNote = (event, note) => {\n      // note here will already have updated value bc of onChange updating it\n      fetch(`http://localhost:3000/notes/${note.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(note)\n      }).then(resp => resp.json()).then(updatedNote => {\n        let noteList = this.state.notes;\n        noteList.map(note => {\n          if (note.id === updatedNote.id) {\n            note = updatedNote;\n          }\n        });\n        this.setState({\n          notes: noteList\n        });\n      });\n    };\n\n    this.addNote = (event, note) => {\n      event.preventDefault();\n      let postObj = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          content: event.target[0].value,\n          job_id: this.props.job.id\n        })\n      };\n      event.target.reset();\n      fetch(`http://localhost:3000/notes`, postObj).then(resp => resp.json()).then(newNote => {\n        this.state.notes.push(newNote);\n        this.setState({\n          notes: this.state.notes\n        });\n      });\n    };\n\n    this.deleteNote = note => {\n      fetch(`http://localhost:3000/notes/${note.id}`, {\n        method: \"DELETE\"\n      }).then(resp => resp.json()).then(remainingNoteList => {\n        this.setState({\n          notes: remainingNoteList\n        });\n      });\n    };\n\n    this.changeStatus = event => {\n      fetch(`http://localhost:3000/jobs/${this.props.job.id}`, {\n        method: \"PATCH\",\n        headers: \"Content-Type\",\n        body: JSON.stringify({\n          status: event.target.value\n        }).then(updatedJob => {\n          debugger; // how do i make this component rerender with the new job\n          // is this why they tell us to keep one state. idk. \n        })\n      });\n    };\n\n    this.state = {\n      notes: null,\n      tasks: null\n    };\n  } // or is it better to fetch all notes and tasks while you fetch all jobs\n\n\n  componentDidMount() {\n    fetch(`http://localhost:3000/jobs/${this.props.job.id}`).then(resp => resp.json()).then(jobData => {\n      this.setState({\n        notes: jobData.notes,\n        tasks: jobData.tasks\n      });\n    });\n  }\n\n  render() {\n    const divStyle = {\n      display: \"grid\",\n      width: \"100%\",\n      gridTemplateColumns: \"repeat(2, 1fr)\",\n      gridColumnGap: \"10px\",\n      marginLeft: \"30px\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.handleBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }\n    }, \" Go back \"), /*#__PURE__*/React.createElement(\"a\", {\n      href: this.props.job.url,\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, \" \", this.props.job.title, \" \")), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }\n    }, \" \", this.props.job.company, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }\n    }, \" \", this.props.job.location, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group mb-3\",\n      style: {\n        width: \"20%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"input-group-text\",\n      htmlFor: \"inputGroupSelect01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    }, \"Status\")), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"custom-select\",\n      id: \"inputGroupSelect01\",\n      value: this.props.job.status,\n      onChange: this.changeStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"apply\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 15\n      }\n    }, \"Apply\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"follow-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    }, \"Follow-Up\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"closed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 15\n      }\n    }, \"Closed\")))), /*#__PURE__*/React.createElement(\"div\", {\n      style: divStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }\n    }, this.state.notes ? /*#__PURE__*/React.createElement(NotesBox, {\n      notes: this.state.notes,\n      editNote: this.editNote,\n      addNote: this.addNote,\n      editNote: this.editNote,\n      deleteNote: this.deleteNote,\n      handleNoteChange: this.handleNoteChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 15\n      }\n    }) : null, this.state.tasks ? /*#__PURE__*/React.createElement(TasksBox, {\n      tasks: this.state.tasks,\n      addTask: this.addTask,\n      editTask: this.editTask,\n      deleteTask: this.deleteTask,\n      handleTaskChange: this.handleTaskChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 15\n      }\n    }) : null));\n  }\n\n}","map":{"version":3,"sources":["/Users/paulhoffart/Desktop/Atomic-Job/atomic-job-front-end/src/components/JobShow.js"],"names":["React","NotesBox","TasksBox","JobShow","Component","constructor","handleTaskChange","event","taskEditing","taskList","state","tasks","item","target","value","map","task","setState","addTask","preventDefault","postObj","method","headers","body","JSON","stringify","closed","job_id","props","job","id","reset","fetch","then","resp","json","newTask","push","editTask","updatedTask","deleteTask","reminaingTaskList","handleNoteChange","noteEditing","noteList","notes","content","note","editNote","updatedNote","addNote","newNote","deleteNote","remainingNoteList","changeStatus","status","updatedJob","componentDidMount","jobData","render","divStyle","display","width","gridTemplateColumns","gridColumnGap","marginLeft","handleBack","url","title","company","location"],"mappings":"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","sourcesContent":["import React from 'react'\nimport NotesBox from './NotesBox'\nimport TasksBox from './TasksBox'\n\n\nexport default class JobShow extends React.Component {\n\n  constructor(){\n    super()\n    this.state = {\n      notes: null,\n      tasks: null,\n    } \n  }\n\n  // or is it better to fetch all notes and tasks while you fetch all jobs\n  componentDidMount(){\n    fetch(`http://localhost:3000/jobs/${this.props.job.id}`)\n    .then(resp => resp.json())\n    .then(jobData => {\n      this.setState({\n        notes: jobData.notes,\n        tasks: jobData.tasks\n      })\n    })\n  }\n\n   handleTaskChange = (event, taskEditing) => {\n    let taskList = this.state.tasks\n    taskEditing.item = event.target.value\n    taskList.map(task => {\n      if (task === taskEditing ){\n        task.item = taskEditing.item\n      }\n    })\n    this.setState({\n      tasks: taskList\n    })\n  }\n\n  addTask = (event, task) => {\n    event.preventDefault()\n    let postObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        item: event.target[0].value,\n        closed: false,\n        job_id: this.props.job.id\n      })\n    }\n    event.target.reset()\n    fetch(`http://localhost:3000/job_tasks`, postObj)\n    .then(resp => resp.json())\n    .then(newTask => {\n      this.state.tasks.push(newTask)\n      this.setState({\n        tasks: this.state.tasks\n      })\n    })\n  }\n\n  editTask = (event, task) => {\n    // task here will already have updated value bc of onChange updating it\n    // or closed being toggle within the Task component \n    fetch(`http://localhost:3000/job_tasks/${task.id}`, {\n      method: \"PATCH\",\n      headers: {\"Content-Type\": \"application/json\"}, \n      body: JSON.stringify(task)\n    })\n    .then(resp => resp.json())\n    .then(updatedTask => {\n      let taskList = this.state.tasks\n      taskList.map(task=>{\n        if(task.id === updatedTask.id){\n          task = updatedTask\n        }\n      })\n      this.setState({\n        tasks: taskList\n      })\n    })\n  }\n\n  deleteTask = (task) => {\n    fetch(`http://localhost:3000/job_tasks/${task.id}`, {\n      method: \"DELETE\"\n    })\n    .then(resp => resp.json())\n    .then(reminaingTaskList => {\n      this.setState({\n        tasks: reminaingTaskList\n      })\n    })\n  }\n\n\n  handleNoteChange = (event, noteEditing) => {\n    let noteList = this.state.notes\n    noteEditing.content = event.target.value\n    noteList.map(note => {\n      if (note === noteEditing ){\n        note.item = noteEditing.content\n      }\n    })\n    this.setState({\n      notes: noteList\n    })\n  }\n\n  editNote = (event, note) => {\n    // note here will already have updated value bc of onChange updating it\n    fetch(`http://localhost:3000/notes/${note.id}`, {\n      method: \"PATCH\",\n      headers: {\"Content-Type\": \"application/json\"}, \n      body: JSON.stringify(note)\n    })\n    .then(resp => resp.json())\n    .then(updatedNote => {\n      let noteList = this.state.notes\n      noteList.map(note=>{\n        if(note.id === updatedNote.id){\n          note = updatedNote\n        }\n      })\n      this.setState({\n        notes: noteList\n      })\n    })\n  }\n\n  addNote = (event, note) => {\n    event.preventDefault()\n    let postObj = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          content: event.target[0].value,\n          job_id: this.props.job.id\n        })\n    }\n    event.target.reset()\n    fetch(`http://localhost:3000/notes`, postObj)\n    .then(resp => resp.json())\n    .then(newNote => {\n      this.state.notes.push(newNote)\n      this.setState({\n        notes: this.state.notes\n      })\n    })\n    \n  }\n\n  deleteNote = (note) => {\n    fetch(`http://localhost:3000/notes/${note.id}`,{\n      method: \"DELETE\"\n    })\n    .then(resp => resp.json())\n    .then(remainingNoteList => {\n      this.setState({\n        notes: remainingNoteList\n      })\n    })\n  }\n\n  changeStatus = (event) => {\n    fetch(`http://localhost:3000/jobs/${this.props.job.id}`,{\n      method: \"PATCH\",\n      headers: \"Content-Type\",\n      body: JSON.stringify({\n        status: event.target.value\n      })\n      .then(updatedJob => {\n        debugger\n        // how do i make this component rerender with the new job\n        // is this why they tell us to keep one state. idk. \n      })\n    })\n    \n  }\n  \n\n  render(){\n    const divStyle = {\n      display: \"grid\",\n      width: \"100%\",\n      gridTemplateColumns: \"repeat(2, 1fr)\",\n      gridColumnGap: \"10px\",\n      marginLeft: \"30px\"\n    }\n    return(\n      <div> \n        <div className=\"jumbotron\">\n        <button onClick={this.props.handleBack}> Go back </button>\n          <a href={this.props.job.url} target=\"_blank\">\n            <h1> {this.props.job.title} </h1> \n          </a>\n          <h2> {this.props.job.company} </h2>\n          <h3> {this.props.job.location} </h3>\n          <div className=\"input-group mb-3\" style={{width: \"20%\"}}>\n            <div className=\"input-group-prepend\">\n              <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">Status</label>\n            </div>\n            <select className=\"custom-select\" id=\"inputGroupSelect01\" value={this.props.job.status} onChange={this.changeStatus}>\n              <option value=\"apply\">Apply</option>\n              <option value=\"follow-up\">Follow-Up</option>\n              <option value=\"closed\">Closed</option>\n            </select>\n          </div>\n        </div>\n        <div style={divStyle}>\n          {\n            this.state.notes \n            ? <NotesBox \n                notes={this.state.notes} \n                editNote={this.editNote}\n                addNote={this.addNote} editNote={this.editNote} \n                deleteNote={this.deleteNote}\n                handleNoteChange={this.handleNoteChange}/> \n\n            : null\n          }\n          {\n            this.state.tasks \n            ? <TasksBox \n                tasks={this.state.tasks} \n                addTask={this.addTask} \n                editTask={this.editTask} \n                deleteTask={this.deleteTask} \n                handleTaskChange={this.handleTaskChange}/>\n            : null\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}