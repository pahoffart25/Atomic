{"ast":null,"code":"var _jsxFileName = \"/Users/paulhoffart/Desktop/Atomic-Job/atomic-job-front-end/src/containers/Jobs.js\";\nimport React from 'react'; // import JobShow from \"../components/JobShow\"\n// import JobList from \"../void/JobList\"\n\nimport List from '../components/List';\nimport JobForm from \"../components/JobForm\";\nimport JobModalShow from '../components/JobModalShow';\nexport default class Jobs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleShowJob = job => {\n      this.setState({\n        showJob: job\n      });\n    };\n\n    this.handleBack = () => {\n      this.setState({\n        showJob: null\n      });\n    };\n\n    this.handleSearch = e => {\n      this.setState({\n        search: e.target.value\n      });\n    };\n\n    this.changeSearch = () => addJob = event => {\n      event.preventDefault();\n      let postObject = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        },\n        body: JSON.stringify({\n          title: event.target[0].value,\n          company: event.target[1].value,\n          location: event.target[2].value,\n          url: event.target[3].value,\n          status: \"apply\",\n          interview: \"false\",\n          user_id: this.state.user_id\n        })\n      };\n      event.target.reset();\n      fetch(\"http://localhost:3000/jobs\", postObject).then(resp => resp.json()).then(newJob => {\n        this.setState({\n          jobsDisplay: [...this.state.jobs, newJob],\n          showJob: newJob\n        });\n      });\n    };\n\n    this.editJob = job => {\n      fetch(`http://localhost:3000/jobs/${job.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        },\n        body: JSON.stringify({\n          title: job.title,\n          company: job.company,\n          status: job.status,\n          interview: job.interview\n        })\n      }).then(resp => resp.json()).then(updatedJob => {\n        let updatedJobList = this.state.jobs.map(job => job.id === updatedJob.id ? job = updatedJob : job);\n        this.setState({\n          jobs: updatedJobList,\n          jobsDisplay: updatedJobList\n        });\n      });\n    };\n\n    this.deleteJob = job => {\n      fetch(`http://localhost:3000/jobs/${job.id}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      }).then(resp => resp.json()).then(remainingJobs => {\n        this.setState({\n          jobs: remainingJobs,\n          jobsDisplay: remainingJobs\n        });\n      });\n    };\n\n    this.state = {\n      jobs: [],\n      jobsDisplay: [],\n      user_id: props.user.id,\n      showJob: null,\n      search: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:3000/users/${this.state.user_id}/jobs`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    }).then(resp => resp.json()).then(jobData => {\n      this.setState({\n        jobs: jobData,\n        jobsDisplay: jobData\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(JobForm, {\n      addJob: this.addJob,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(List, {\n      title: \" \",\n      items: this.state.jobsDisplay,\n      handleShowJob: this.handleShowJob,\n      handleSearch: this.handleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 10\n      }\n    }), this.state.showJob ? /*#__PURE__*/React.createElement(JobModalShow, {\n      job: this.state.showJob,\n      deleteJob: this.deleteJob,\n      editJob: this.editJob,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }) : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/paulhoffart/Desktop/Atomic-Job/atomic-job-front-end/src/containers/Jobs.js"],"names":["React","List","JobForm","JobModalShow","Jobs","Component","constructor","props","handleShowJob","job","setState","showJob","handleBack","handleSearch","e","search","target","value","changeSearch","addJob","event","preventDefault","postObject","method","headers","Authorization","localStorage","token","body","JSON","stringify","title","company","location","url","status","interview","user_id","state","reset","fetch","then","resp","json","newJob","jobsDisplay","jobs","editJob","id","updatedJob","updatedJobList","map","deleteJob","remainingJobs","user","componentDidMount","jobData","render"],"mappings":"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","sourcesContent":["import React from 'react'\n// import JobShow from \"../components/JobShow\"\n// import JobList from \"../void/JobList\"\nimport List from '../components/List'\nimport JobForm from \"../components/JobForm\"\nimport JobModalShow from '../components/JobModalShow'\n\n\nexport default class Jobs extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      jobs : [], \n      jobsDisplay: [], \n      user_id: props.user.id,\n      showJob: null,\n      search: ''                       \n    }\n  }\n\n  componentDidMount(){\n    fetch(`http://localhost:3000/users/${this.state.user_id}/jobs`, {\n      method: \"GET\", \n      headers: {\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    })\n    .then(resp => resp.json())\n    .then( jobData => {\n      this.setState({\n        jobs: jobData,\n        jobsDisplay: jobData,\n      })\n    })\n  }\n  \n  handleShowJob = (job) => {\n    this.setState({\n      showJob: job\n    })\n  }\n\n  handleBack = () => {\n    this.setState({\n      showJob: null\n    })\n  }\n\n  handleSearch = (e) => {\n    this.setState({search: e.target.value})\n  }\n\n  changeSearch = () => \n\n  addJob = (event) => {\n    event.preventDefault()\n    let postObject = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({\n        title: event.target[0].value,\n        company: event.target[1].value,\n        location: event.target[2].value,\n        url: event.target[3].value,\n        status: \"apply\",\n        interview: \"false\",\n        user_id: this.state.user_id\n      })\n    }\n    event.target.reset()\n    fetch(\"http://localhost:3000/jobs\", postObject)\n    .then(resp => resp.json())\n    .then(newJob => {\n      this.setState({\n        jobsDisplay: [...this.state.jobs, newJob],\n        showJob: newJob\n      })\n    })\n  }\n\n  editJob = (job) => {\n    fetch(`http://localhost:3000/jobs/${job.id}`,{\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({ \n        title: job.title,\n        company: job.company,\n        status: job.status,\n        interview: job.interview\n      })\n    })\n    .then(resp => resp.json())\n    .then(updatedJob => {\n      let updatedJobList = this.state.jobs.map(job => \n        job.id === updatedJob.id ? job = updatedJob : job\n      )\n      this.setState({\n        jobs: updatedJobList,\n        jobsDisplay: updatedJobList\n      })\n    })\n  }\n\n  deleteJob = (job) => {\n    fetch(`http://localhost:3000/jobs/${job.id}`,{\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    })\n    .then(resp => resp.json())\n    .then(remainingJobs => {\n      this.setState({\n        jobs: remainingJobs,\n        jobsDisplay: remainingJobs\n      })\n    })\n  }\n\n  render(){\n    return (\n      <div>\n        <JobForm addJob={this.addJob}/>\n         <List title = \" \" items={this.state.jobsDisplay} handleShowJob={this.handleShowJob} handleSearch={this.handleSearch}/>\n        { this.state.showJob \n        ? <JobModalShow job={this.state.showJob} deleteJob={this.deleteJob} editJob={this.editJob}/> \n        : null }\n      </div>\n    )\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}