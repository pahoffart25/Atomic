{"ast":null,"code":"var _jsxFileName = \"/Users/paulhoffart/Desktop/Atomic-Job/atomic-job-front-end/src/containers/Jobs.js\";\nimport React from 'react'; // import JobShow from \"../components/JobShow\"\n// import JobList from \"../void/JobList\"\n\nimport List from '../components/List';\nimport JobForm from \"../components/JobForm\";\nimport JobModalShow from '../components/JobModalShow';\nexport default class Jobs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleShowJob = job => {\n      this.setState({\n        showJob: job\n      });\n    };\n\n    this.handleBack = () => {\n      this.setState({\n        showJob: null\n      });\n    };\n\n    this.addJob = event => {\n      event.preventDefault();\n      let postObject = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        },\n        body: JSON.stringify({\n          title: event.target[0].value,\n          company: event.target[1].value,\n          location: event.target[2].value,\n          url: event.target[3].value,\n          status: \"open\",\n          interview: \"false\",\n          user_id: this.state.user_id,\n          dateApplied: \"\"\n        })\n      };\n      event.target.reset();\n      fetch(\"http://localhost:3000/jobs\", postObject).then(resp => resp.json()).then(newJob => {\n        this.state.jobs ? this.state.jobs.push(newJob) : this.state.jobs = [newJob]; // this.state.jobsDisplay ? this.state.jobsDisplay.push(newJob) :  this.state.jobsDisplay = [newJob]\n\n        this.setState({\n          jobs: this.state.jobs,\n          jobsDisplay: this.state.jobs,\n          showJob: newJob\n        });\n      });\n    };\n\n    this.editJob = job => {\n      fetch(`http://localhost:3000/jobs/${job.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        },\n        body: JSON.stringify({\n          title: job.title,\n          company: job.company,\n          location: job.location,\n          status: job.status,\n          interview: job.interview,\n          dateApplied: job.dateApplied\n        })\n      }).then(resp => resp.json()).then(updatedJob => {\n        let updatedDisplayJobList = this.state.jobsDisplay.map(job => job.id === updatedJob.id ? job = updatedJob : job);\n        let updatedJobList = this.state.jobs.map(job => job.id === updatedJob.id ? job = updatedJob : job);\n        this.setState({\n          jobsDisplay: updatedDisplayJobList,\n          jobs: updatedJobList\n        });\n      });\n    };\n\n    this.deleteJob = job => {\n      fetch(`http://localhost:3000/jobs/${job.id}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      }).then(resp => resp.json()).then(remainingJobs => {\n        this.setState({\n          jobs: remainingJobs,\n          jobsDisplay: remainingJobs\n        });\n      });\n    };\n\n    this.handleSearch = event => {\n      this.setState({\n        search: event.target.value\n      }, () => {\n        this.handleJobDisplay();\n      });\n    };\n\n    this.handleSort = event => {\n      this.setState({\n        sort: event.target.getAttribute(\"name\")\n      }, () => this.handleJobDisplay());\n    };\n\n    this.setFilter = event => {\n      this.setState({\n        filter: event.target.dataset.filter\n      }, () => {\n        this.handleJobDisplay();\n      });\n    };\n\n    this.handleJobDisplay = () => {\n      let jobList = this.state.jobs;\n\n      if (!!this.state.filter) {\n        this.state.filter === \"*\" ? jobList = this.state.jobs : jobList = this.state.jobs.filter(job => job.status === this.state.filter);\n      }\n\n      if (!!this.state.sort) {\n        this.state.sortAsc ? jobList = jobList.sort((jobA, jobB) => jobA[this.state.sort] > jobB[this.state.sort] ? 1 : -1) : jobList = jobList.sort((jobA, jobB) => jobA[this.state.sort] > jobB[this.state.sort] ? -1 : 1);\n        this.state.sortAsc = !this.state.sortAsc;\n      }\n\n      if (!!this.state.search) {\n        jobList = jobList.filter(job => job.title.toLowerCase().includes(this.state.search.toLowerCase()) || job.company.toLowerCase().includes(this.state.search.toLowerCase()) || job.location.toLowerCase().includes(this.state.search.toLowerCase()));\n      }\n\n      this.setState({\n        jobsDisplay: jobList\n      });\n    };\n\n    this.state = {\n      jobs: null,\n      jobsDisplay: null,\n      user_id: props.user.id,\n      showJob: null,\n      search: null,\n      filter: null,\n      sort: null,\n      sortAsc: null\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:3000/users/${this.state.user_id}/jobs`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    }).then(resp => resp.json()).then(jobData => {\n      this.setState({\n        jobs: jobData,\n        jobsDisplay: jobData\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(JobForm, {\n      addJob: this.addJob,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(List, {\n      title: \" \",\n      items: this.state.jobsDisplay,\n      handleShowJob: this.handleShowJob,\n      handleSearch: this.handleSearch,\n      setFilter: this.setFilter,\n      handleSort: this.handleSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(JobModalShow, {\n      job: this.state.showJob,\n      deleteJob: this.deleteJob,\n      editJob: this.editJob,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 10\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/paulhoffart/Desktop/Atomic-Job/atomic-job-front-end/src/containers/Jobs.js"],"names":["React","List","JobForm","JobModalShow","Jobs","Component","constructor","props","handleShowJob","job","setState","showJob","handleBack","addJob","event","preventDefault","postObject","method","headers","Authorization","localStorage","token","body","JSON","stringify","title","target","value","company","location","url","status","interview","user_id","state","dateApplied","reset","fetch","then","resp","json","newJob","jobs","push","jobsDisplay","editJob","id","updatedJob","updatedDisplayJobList","map","updatedJobList","deleteJob","remainingJobs","handleSearch","search","handleJobDisplay","handleSort","sort","getAttribute","setFilter","filter","dataset","jobList","sortAsc","jobA","jobB","toLowerCase","includes","user","componentDidMount","jobData","render"],"mappings":"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","sourcesContent":["import React from 'react'\n// import JobShow from \"../components/JobShow\"\n// import JobList from \"../void/JobList\"\nimport List from '../components/List'\nimport JobForm from \"../components/JobForm\"\nimport JobModalShow from '../components/JobModalShow'\n\nexport default class Jobs extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      jobs : null, \n      jobsDisplay: null, \n      user_id: props.user.id,\n      showJob: null,\n      search: null,\n      filter: null,\n      sort: null,\n      sortAsc: null \n    }\n  }\n\n  componentDidMount(){\n    fetch(`http://localhost:3000/users/${this.state.user_id}/jobs`, {\n      method: \"GET\", \n      headers: {\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    })\n    .then(resp => resp.json())\n    .then( jobData => {\n      this.setState({\n        jobs: jobData,\n        jobsDisplay: jobData,\n      })\n    })\n  }\n  \n  handleShowJob = (job) => {\n    this.setState({\n      showJob: job\n    })\n  }\n\n  handleBack = () => {\n    this.setState({\n      showJob: null\n    })\n  }\n\n\n  addJob = (event) => {\n    event.preventDefault()\n    let postObject = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({\n        title: event.target[0].value,\n        company: event.target[1].value,\n        location: event.target[2].value,\n        url: event.target[3].value,\n        status: \"open\",\n        interview: \"false\",\n        user_id: this.state.user_id,\n        dateApplied: \"\"\n      })\n    }\n    event.target.reset()\n    fetch(\"http://localhost:3000/jobs\", postObject)\n    .then(resp => resp.json())\n    .then(newJob => {\n      this.state.jobs ? this.state.jobs.push(newJob) :  this.state.jobs = [newJob]\n      // this.state.jobsDisplay ? this.state.jobsDisplay.push(newJob) :  this.state.jobsDisplay = [newJob]\n      this.setState({\n        jobs: this.state.jobs,\n        jobsDisplay: this.state.jobs,\n        showJob: newJob\n      })\n    })\n  }\n\n  editJob = (job) => {\n    fetch(`http://localhost:3000/jobs/${job.id}`,{\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({ \n        title: job.title,\n        company: job.company,\n        location: job.location,\n        status: job.status,\n        interview: job.interview,\n        dateApplied: job.dateApplied\n      })\n    })\n    .then(resp => resp.json())\n    .then(updatedJob => {\n      let updatedDisplayJobList = this.state.jobsDisplay.map(job => \n        job.id === updatedJob.id ? job = updatedJob : job\n      )\n      let updatedJobList = this.state.jobs.map(job => \n        job.id === updatedJob.id ? job = updatedJob : job\n      )\n      this.setState({\n        jobsDisplay: updatedDisplayJobList,\n        jobs: updatedJobList,\n      })\n    })\n  }\n\n\n  deleteJob = (job) => {\n    fetch(`http://localhost:3000/jobs/${job.id}`,{\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    })\n    .then(resp => resp.json())\n    .then(remainingJobs => {\n      this.setState({\n        jobs: remainingJobs,\n        jobsDisplay: remainingJobs\n      })\n    })\n  }\n\n\n  handleSearch = (event) => {\n    this.setState({\n      search: event.target.value\n    }, ()=> {this.handleJobDisplay()})\n  }\n\n  handleSort = (event) => {\n    this.setState({\n      sort: event.target.getAttribute(\"name\")\n    }, () => this.handleJobDisplay() )\n  } \n\n  setFilter = (event) => {\n    this.setState({\n      filter: event.target.dataset.filter\n    }, ()=> {this.handleJobDisplay()})\n  }\n\n  handleJobDisplay = () => {\n    let jobList = this.state.jobs\n    if (!!this.state.filter){\n      this.state.filter === \"*\"\n      ? jobList = this.state.jobs\n      : jobList = this.state.jobs.filter( job => job.status === this.state.filter )\n    } \n    if (!!this.state.sort){\n      this.state.sortAsc \n      ? jobList = jobList.sort( (jobA, jobB) => jobA[this.state.sort] > jobB[this.state.sort] ? 1 : -1 )\n      : jobList = jobList.sort( (jobA, jobB) => jobA[this.state.sort] > jobB[this.state.sort] ? -1 : 1 )\n      this.state.sortAsc = !this.state.sortAsc\n    }\n    if (!!this.state.search){\n      jobList = jobList.filter(job => job.title.toLowerCase().includes(this.state.search.toLowerCase()) || job.company.toLowerCase().includes(this.state.search.toLowerCase()) || job.location.toLowerCase().includes(this.state.search.toLowerCase()))\n    }\n    this.setState({\n      jobsDisplay: jobList\n    })\n  }\n\n  render(){\n    \n    return (\n      <div>\n        <JobForm addJob={this.addJob}/>\n         <List title = \" \" items={this.state.jobsDisplay} handleShowJob={this.handleShowJob} handleSearch={this.handleSearch} setFilter={this.setFilter} handleSort={this.handleSort}/>\n         <JobModalShow job={this.state.showJob} deleteJob={this.deleteJob} editJob={this.editJob}/> \n      </div>\n    )\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}