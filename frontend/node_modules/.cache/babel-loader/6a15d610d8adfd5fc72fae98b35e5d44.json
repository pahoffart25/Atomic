{"ast":null,"code":"var _jsxFileName = \"/Users/paulhoffart/Desktop/Atomic-Job/atomic-job-front-end/src/containers/Jobs.js\";\nimport React from 'react'; // import JobShow from \"../components/JobShow\"\n// import JobList from \"../void/JobList\"\n\nimport List from '../components/List';\nimport JobForm from \"../components/JobForm\";\nimport JobModalShow from '../components/JobModalShow';\nexport default class Jobs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleShowJob = job => {\n      this.setState({\n        showJob: job\n      });\n    };\n\n    this.handleBack = () => {\n      this.setState({\n        showJob: null\n      });\n    };\n\n    this.handleSearch = e => {\n      let searchedJobs = this.state.jobs.filter(job => job.title.toLowerCase().includes(e.target.value.toLowerCase()) || job.company.toLowerCase().includes(e.target.value.toLowerCase()));\n      this.setState({\n        jobsDisplay: searchedJobs\n      });\n    };\n\n    this.handleSort = e => {\n      let sortBy = e.target.getAttribute(\"name\");\n      let sorted;\n      this.state.sortAsc ? sorted = this.state.jobsDisplay.sort((jobA, jobB) => jobA[sortBy] > jobB[sortBy] ? 1 : -1) : sorted = this.state.jobsDisplay.sort((jobA, jobB) => jobA[sortBy] > jobB[sortBy] ? -1 : 1);\n      this.setState({\n        sortAsc: !this.state.sortAsc,\n        jobsDisplay: sorted\n      });\n    };\n\n    this.addJob = event => {\n      event.preventDefault();\n      let postObject = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        },\n        body: JSON.stringify({\n          title: event.target[0].value,\n          company: event.target[1].value,\n          location: event.target[2].value,\n          url: event.target[3].value,\n          status: \"Not Applied\",\n          interview: \"false\",\n          user_id: this.state.user_id\n        })\n      };\n      event.target.reset();\n      fetch(\"http://localhost:3000/jobs\", postObject).then(resp => resp.json()).then(newJob => {\n        console.log(\"newJob posted\", newJob);\n        this.state.jobs ? this.state.jobs.push(newJob) : this.state.jobs = [newJob];\n        this.setState({\n          jobs: this.state.jobs,\n          jobsDisplay: this.state.jobs\n        });\n      });\n    };\n\n    this.editJob = job => {\n      fetch(`http://localhost:3000/jobs/${job.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        },\n        body: JSON.stringify({\n          title: job.title,\n          company: job.company,\n          location: job.location,\n          status: job.status,\n          interview: job.interview\n        })\n      }).then(resp => resp.json()).then(updatedJob => {\n        let updatedJobList = this.state.jobs.map(job => job.id === updatedJob.id ? job = updatedJob : job);\n        this.setState({\n          jobs: updatedJobList,\n          jobsDisplay: updatedJobList\n        });\n      });\n    };\n\n    this.deleteJob = job => {\n      fetch(`http://localhost:3000/jobs/${job.id}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      }).then(resp => resp.json()).then(remainingJobs => {\n        this.setState({\n          jobs: remainingJobs,\n          jobsDisplay: remainingJobs\n        });\n      });\n    };\n\n    this.setFilter = event => {\n      let filter = event.target.dataset.filter;\n      let filteredJobs;\n      filter === \"*\" ? filteredJobs = this.state.jobs : filteredJobs = this.state.jobs.filter(job => job.status === filter);\n      this.setState({\n        jobsDisplay: filteredJobs\n      });\n    };\n\n    this.state = {\n      jobs: false,\n      jobsDisplay: false,\n      user_id: props.user.id,\n      showJob: null,\n      search: '',\n      sortAsc: true\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:3000/users/${this.state.user_id}/jobs`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    }).then(resp => resp.json()).then(jobData => {\n      this.setState({\n        jobs: jobData,\n        jobsDisplay: jobData\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(JobForm, {\n      addJob: this.addJob,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(List, {\n      title: \" \",\n      items: this.state.jobsDisplay,\n      handleShowJob: this.handleShowJob,\n      handleSearch: this.handleSearch,\n      setFilter: this.setFilter,\n      handleSort: this.handleSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 10\n      }\n    }), this.state.showJob ? /*#__PURE__*/React.createElement(JobModalShow, {\n      job: this.state.showJob,\n      deleteJob: this.deleteJob,\n      editJob: this.editJob,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }\n    }) : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/paulhoffart/Desktop/Atomic-Job/atomic-job-front-end/src/containers/Jobs.js"],"names":["React","List","JobForm","JobModalShow","Jobs","Component","constructor","props","handleShowJob","job","setState","showJob","handleBack","handleSearch","e","searchedJobs","state","jobs","filter","title","toLowerCase","includes","target","value","company","jobsDisplay","handleSort","sortBy","getAttribute","sorted","sortAsc","sort","jobA","jobB","addJob","event","preventDefault","postObject","method","headers","Authorization","localStorage","token","body","JSON","stringify","location","url","status","interview","user_id","reset","fetch","then","resp","json","newJob","console","log","push","editJob","id","updatedJob","updatedJobList","map","deleteJob","remainingJobs","setFilter","dataset","filteredJobs","user","search","componentDidMount","jobData","render"],"mappings":"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","sourcesContent":["import React from 'react'\n// import JobShow from \"../components/JobShow\"\n// import JobList from \"../void/JobList\"\nimport List from '../components/List'\nimport JobForm from \"../components/JobForm\"\nimport JobModalShow from '../components/JobModalShow'\n\n\nexport default class Jobs extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      jobs : false, \n      jobsDisplay: false, \n      user_id: props.user.id,\n      showJob: null,\n      search: '',\n      sortAsc: true                      \n    }\n  }\n\n  componentDidMount(){\n    fetch(`http://localhost:3000/users/${this.state.user_id}/jobs`, {\n      method: \"GET\", \n      headers: {\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    })\n    .then(resp => resp.json())\n    .then( jobData => {\n      this.setState({\n        jobs: jobData,\n        jobsDisplay: jobData,\n      })\n    })\n  }\n  \n  handleShowJob = (job) => {\n    this.setState({\n      showJob: job\n    })\n  }\n\n  handleBack = () => {\n    this.setState({\n      showJob: null\n    })\n  }\n\n  handleSearch = (e) => {\n    let searchedJobs = this.state.jobs.filter(job => job.title.toLowerCase().includes(e.target.value.toLowerCase()) || job.company.toLowerCase().includes(e.target.value.toLowerCase()))\n    this.setState({jobsDisplay: searchedJobs})\n  }\n\n  handleSort = (e) => {\n    let sortBy = e.target.getAttribute(\"name\")\n    let sorted\n    this.state.sortAsc\n    ? sorted = this.state.jobsDisplay.sort( (jobA, jobB) => jobA[sortBy] > jobB[sortBy] ? 1 : -1 )\n    : sorted = this.state.jobsDisplay.sort( (jobA, jobB) => jobA[sortBy] > jobB[sortBy] ? -1 : 1 )\n    this.setState({\n      sortAsc: !this.state.sortAsc,\n      jobsDisplay: sorted\n    })\n  } \n\n  addJob = (event) => {\n    event.preventDefault()\n    let postObject = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({\n        title: event.target[0].value,\n        company: event.target[1].value,\n        location: event.target[2].value,\n        url: event.target[3].value,\n        status: \"Not Applied\",\n        interview: \"false\",\n        user_id: this.state.user_id\n      })\n    }\n    event.target.reset()\n    fetch(\"http://localhost:3000/jobs\", postObject)\n    .then(resp => resp.json())\n    .then(newJob => {\n      console.log(\"newJob posted\", newJob)\n      this.state.jobs ? this.state.jobs.push(newJob) :  this.state.jobs = [newJob]\n      this.setState({\n        jobs: this.state.jobs,\n        jobsDisplay: this.state.jobs\n      })\n    })\n  }\n\n  editJob = (job) => {\n    fetch(`http://localhost:3000/jobs/${job.id}`,{\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({ \n        title: job.title,\n        company: job.company,\n        location: job.location,\n        status: job.status,\n        interview: job.interview\n      })\n    })\n    .then(resp => resp.json())\n    .then(updatedJob => {\n      let updatedJobList = this.state.jobs.map(job => \n        job.id === updatedJob.id ? job = updatedJob : job\n      )\n      this.setState({\n        jobs: updatedJobList,\n        jobsDisplay: updatedJobList\n      })\n    })\n  }\n\n  deleteJob = (job) => {\n    fetch(`http://localhost:3000/jobs/${job.id}`,{\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    })\n    .then(resp => resp.json())\n    .then(remainingJobs => {\n      this.setState({\n        jobs: remainingJobs,\n        jobsDisplay: remainingJobs\n      })\n    })\n  }\n\n  setFilter = (event) => {\n    let filter = event.target.dataset.filter\n    let filteredJobs\n    filter === \"*\"\n    ? filteredJobs = this.state.jobs\n    : filteredJobs = this.state.jobs.filter( job => job.status === filter )\n    this.setState({\n      jobsDisplay: filteredJobs\n    })\n  }\n\n  render(){\n    return (\n      <div>\n        <JobForm addJob={this.addJob}/>\n         <List title = \" \" items={this.state.jobsDisplay} handleShowJob={this.handleShowJob} handleSearch={this.handleSearch} setFilter={this.setFilter} handleSort={this.handleSort}/>\n        { this.state.showJob \n        ? <JobModalShow job={this.state.showJob} deleteJob={this.deleteJob} editJob={this.editJob}/> \n        : null }\n      </div>\n    )\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}