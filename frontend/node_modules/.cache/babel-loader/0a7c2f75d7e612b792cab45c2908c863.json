{"ast":null,"code":"var _jsxFileName = \"/Users/paulhoffart/Desktop/Atomic-Job/atomic-job-front-end/src/components/UserTasks.js\";\nimport React from \"react\";\nimport TasksBox from \"./TasksBox\";\nexport default class UserTasks extends React.Component {\n  constructor() {\n    super();\n\n    this.editTask = task => {\n      fetch(`http://localhost:3000/user_tasks/${task.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        },\n        body: JSON.stringify(task)\n      }).then(resp => resp.json()).then(updatedTask => {\n        let updatedTaskList = this.state.displayTasks.map(task => task.id === updatedTask.id ? task = updatedTask : task);\n        this.setState({\n          displayTasks: updatedTaskList\n        });\n      });\n    };\n\n    this.addTask = (event, task) => {\n      const trimmed = event.target[0].value.trim().length;\n\n      if (trimmed !== 0) {\n        event.preventDefault();\n        let postObj = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.token}`\n          },\n          body: JSON.stringify({\n            item: event.target[0].value,\n            closed: false,\n            user_id: this.props.user.id\n          })\n        };\n        event.target.reset();\n        fetch(`http://localhost:3000/user_tasks`, postObj).then(resp => resp.json()).then(newTask => {\n          this.state.displayTasks.push(newTask);\n          this.setState({\n            displayTasks: this.state.displayTasks\n          });\n        });\n      } else {\n        event.preventDefault();\n        alert(\"Please enter your task\");\n        event.target.reset();\n      }\n    };\n\n    this.deleteTask = task => {\n      fetch(`http://localhost:3000/user_tasks/${task.id}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      }).then(resp => resp.json()).then(reminaingTaskList => {\n        this.setState({\n          displayTasks: reminaingTaskList,\n          tasks: reminaingTaskList\n        });\n      });\n    };\n\n    this.filterTask = e => {\n      if (e.target.value === \"All\") {\n        this.setState({\n          displayTasks: this.state.tasks\n        });\n      } else if (e.target.value === 'Completed') this.setState({\n        displayTasks: this.state.tasks.filter(task => task.closed === true)\n      });else {\n        this.setState({\n          displayTasks: this.state.tasks.filter(task => task.closed === false)\n        });\n      }\n    };\n\n    this.state = {\n      tasks: [],\n      displayTasks: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:3000/users/${this.props.user.id}/tasks`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    }).then(resp => resp.json()).then(tasksList => {\n      this.setState({\n        tasks: tasksList,\n        displayTasks: tasksList\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TasksBox, {\n      page: \"user\",\n      tasks: this.state.displayTasks,\n      filterTask: this.filterTask,\n      addTask: this.addTask,\n      editTask: this.editTask,\n      deleteTask: this.deleteTask,\n      handleTaskChange: this.handleTaskChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/paulhoffart/Desktop/Atomic-Job/atomic-job-front-end/src/components/UserTasks.js"],"names":["React","TasksBox","UserTasks","Component","constructor","editTask","task","fetch","id","method","headers","Authorization","localStorage","token","body","JSON","stringify","then","resp","json","updatedTask","updatedTaskList","state","displayTasks","map","setState","addTask","event","trimmed","target","value","trim","length","preventDefault","postObj","item","closed","user_id","props","user","reset","newTask","push","alert","deleteTask","reminaingTaskList","tasks","filterTask","e","filter","componentDidMount","tasksList","render","handleTaskChange"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,eAAe,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;AAErDC,EAAAA,WAAW,GAAE;AACX;;AADW,SAwBbC,QAxBa,GAwBDC,IAAD,IAAU;AACnBC,MAAAA,KAAK,CAAE,oCAAmCD,IAAI,CAACE,EAAG,EAA7C,EAAgD;AACnDC,QAAAA,MAAM,EAAE,OAD2C;AAEnDC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,KAAM;AAFrC,SAF0C;AAMnDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,IAAf;AAN6C,OAAhD,CAAL,CAQCW,IARD,CAQMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EARd,EASCF,IATD,CASMG,WAAW,IAAI;AACnB,YAAIC,eAAe,GAAG,KAAKC,KAAL,CAAWC,YAAX,CAAwBC,GAAxB,CAA6BlB,IAAI,IACrDA,IAAI,CAACE,EAAL,KAAYY,WAAW,CAACZ,EAAxB,GAA6BF,IAAI,GAAGc,WAApC,GAAkDd,IAD9B,CAAtB;AAGA,aAAKmB,QAAL,CAAc;AACZF,UAAAA,YAAY,EAAEF;AADF,SAAd;AAGD,OAhBD;AAiBD,KA1CY;;AAAA,SA4CbK,OA5Ca,GA4CH,CAACC,KAAD,EAAQrB,IAAR,KAAiB;AACzB,YAAMsB,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBC,KAAhB,CAAsBC,IAAtB,GAA6BC,MAA7C;;AACA,UAAIJ,OAAO,KAAK,CAAhB,EAAmB;AACnBD,QAAAA,KAAK,CAACM,cAAN;AACA,YAAIC,OAAO,GAAG;AACZzB,UAAAA,MAAM,EAAE,MADI;AAEZC,UAAAA,OAAO,EAAE;AACP,4BAAgB,kBADT;AAEPC,YAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,KAAM;AAFrC,WAFG;AAMZC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBmB,YAAAA,IAAI,EAAER,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBC,KADH;AAEnBM,YAAAA,MAAM,EAAE,KAFW;AAGnBC,YAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWC,IAAX,CAAgB/B;AAHN,WAAf;AANM,SAAd;AAYAmB,QAAAA,KAAK,CAACE,MAAN,CAAaW,KAAb;AACAjC,QAAAA,KAAK,CAAE,kCAAF,EAAqC2B,OAArC,CAAL,CACCjB,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMwB,OAAO,IAAI;AACf,eAAKnB,KAAL,CAAWC,YAAX,CAAwBmB,IAAxB,CAA6BD,OAA7B;AACA,eAAKhB,QAAL,CAAc;AACZF,YAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWC;AADb,WAAd;AAGD,SAPD;AAQC,OAvBD,MAuBO;AACLI,QAAAA,KAAK,CAACM,cAAN;AACAU,QAAAA,KAAK,CAAC,wBAAD,CAAL;AACAhB,QAAAA,KAAK,CAACE,MAAN,CAAaW,KAAb;AACD;AACF,KA1EY;;AAAA,SA4EbI,UA5Ea,GA4ECtC,IAAD,IAAU;AACrBC,MAAAA,KAAK,CAAE,oCAAmCD,IAAI,CAACE,EAAG,EAA7C,EAAgD;AACnDC,QAAAA,MAAM,EAAE,QAD2C;AAEnDC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,KAAM;AADrC;AAF0C,OAAhD,CAAL,CAMCI,IAND,CAMMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EANd,EAOCF,IAPD,CAOM4B,iBAAiB,IAAI;AACzB,aAAKpB,QAAL,CAAc;AACZF,UAAAA,YAAY,EAAEsB,iBADF;AAEZC,UAAAA,KAAK,EAAED;AAFK,SAAd;AAID,OAZD;AAaD,KA1FY;;AAAA,SA4FbE,UA5Fa,GA4FCC,CAAD,IAAO;AAClB,UAAGA,CAAC,CAACnB,MAAF,CAASC,KAAT,KAAmB,KAAtB,EAA4B;AAC1B,aAAKL,QAAL,CAAc;AAACF,UAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWwB;AAA1B,SAAd;AACD,OAFD,MAEM,IAAGE,CAAC,CAACnB,MAAF,CAASC,KAAT,KAAmB,WAAtB,EACJ,KAAKL,QAAL,CAAc;AAACF,QAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWwB,KAAX,CAAiBG,MAAjB,CAAwB3C,IAAI,IAAIA,IAAI,CAAC8B,MAAL,KAAgB,IAAhD;AAAf,OAAd,EADI,KAED;AACH,aAAKX,QAAL,CAAc;AAACF,UAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWwB,KAAX,CAAiBG,MAAjB,CAAwB3C,IAAI,IAAIA,IAAI,CAAC8B,MAAL,KAAgB,KAAhD;AAAf,SAAd;AACD;AACF,KApGY;;AAEX,SAAKd,KAAL,GAAa;AACXwB,MAAAA,KAAK,EAAE,EADI;AAEXvB,MAAAA,YAAY,EAAE;AAFH,KAAb;AAID;;AAED2B,EAAAA,iBAAiB,GAAE;AACjB3C,IAAAA,KAAK,CAAE,+BAA8B,KAAK+B,KAAL,CAAWC,IAAX,CAAgB/B,EAAG,QAAnD,EAA4D;AAC/DC,MAAAA,MAAM,EAAE,KADuD;AAE/DC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,KAAM;AADrC;AAFsD,KAA5D,CAAL,CAMCI,IAND,CAMMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EANd,EAOCF,IAPD,CAOMkC,SAAS,IAAI;AACjB,WAAK1B,QAAL,CAAc;AACZqB,QAAAA,KAAK,EAAEK,SADK;AAEZ5B,QAAAA,YAAY,EAAE4B;AAFF,OAAd;AAID,KAZD;AAaD;;AAiFDC,EAAAA,MAAM,GAAE;AACN,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,QAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWC,YAFpB;AAGE,MAAA,UAAU,EAAE,KAAKwB,UAHnB;AAIE,MAAA,OAAO,EAAE,KAAKrB,OAJhB;AAKE,MAAA,QAAQ,EAAE,KAAKrB,QALjB;AAME,MAAA,UAAU,EAAE,KAAKuC,UANnB;AAOE,MAAA,gBAAgB,EAAE,KAAKS,gBAPzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAFF,CADJ;AAkBD;;AA5HoD","sourcesContent":["import React from \"react\"\nimport TasksBox from \"./TasksBox\"\n\nexport default class UserTasks extends React.Component {\n\n  constructor(){\n    super()\n    this.state = {\n      tasks: [],\n      displayTasks: []\n    }\n  }\n\n  componentDidMount(){\n    fetch(`http://localhost:3000/users/${this.props.user.id}/tasks`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${localStorage.token}` \n      }\n    })\n    .then(resp => resp.json())\n    .then(tasksList => {\n      this.setState({\n        tasks: tasksList,\n        displayTasks: tasksList\n      })\n    })\n  }\n\n  editTask = (task) => {\n    fetch(`http://localhost:3000/user_tasks/${task.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.token}`\n      }, \n      body: JSON.stringify(task)\n    })\n    .then(resp => resp.json())\n    .then(updatedTask => {\n      let updatedTaskList = this.state.displayTasks.map( task=> \n        task.id === updatedTask.id ? task = updatedTask : task\n      )\n      this.setState({\n        displayTasks: updatedTaskList\n      })\n    })\n  }\n\n  addTask = (event, task) => {\n    const trimmed = event.target[0].value.trim().length\n    if (trimmed !== 0) {\n    event.preventDefault()\n    let postObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({\n        item: event.target[0].value,\n        closed: false,\n        user_id: this.props.user.id\n      })\n    }\n    event.target.reset()\n    fetch(`http://localhost:3000/user_tasks`, postObj)\n    .then(resp => resp.json())\n    .then(newTask => {\n      this.state.displayTasks.push(newTask)\n      this.setState({\n        displayTasks: this.state.displayTasks\n      })\n    })\n    } else {\n      event.preventDefault()\n      alert(\"Please enter your task\")\n      event.target.reset()\n    }\n  }\n\n  deleteTask = (task) => {\n    fetch(`http://localhost:3000/user_tasks/${task.id}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${localStorage.token}`\n      }\n    })\n    .then(resp => resp.json())\n    .then(reminaingTaskList => {\n      this.setState({\n        displayTasks: reminaingTaskList,\n        tasks: reminaingTaskList\n      })\n    })\n  }\n\n  filterTask = (e) => {\n    if(e.target.value === \"All\"){\n      this.setState({displayTasks: this.state.tasks})\n    }else if(e.target.value === 'Completed')\n      this.setState({displayTasks: this.state.tasks.filter(task => task.closed === true)}) \n    else {\n      this.setState({displayTasks: this.state.tasks.filter(task => task.closed === false)}) \n    }\n  }\n\n\n  render(){\n    return(\n        <div className=\"container\">\n          {/* <div className=\"mt-5 justify-content-center\"> */}\n          <div className=\"mt-5\">\n\n              <TasksBox \n                page=\"user\"\n                tasks={this.state.displayTasks} \n                filterTask={this.filterTask}\n                addTask={this.addTask} \n                editTask={this.editTask} \n                deleteTask={this.deleteTask} \n                handleTaskChange={this.handleTaskChange}/>\n          </div> \n        </div> \n\n\n    )\n  }\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}